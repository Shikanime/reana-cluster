apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
spec:
  podManagementPolicy: OrderedReady
  selector:
    matchLabels: &containerLabels
      app: rabbitmq
  serviceName: rabbitmq-headless
  template:
    metadata:
      labels: *containerLabels
    spec:
      containers:
        - command:
            - bash
            - -ec
            - |
              mkdir -p /opt/bitnami/rabbitmq/.rabbitmq/
              mkdir -p /opt/bitnami/rabbitmq/etc/rabbitmq/
              touch /opt/bitnami/rabbitmq/var/lib/rabbitmq/.start
              #persist the erlang cookie in both places for server and cli tools
              echo $RABBITMQ_ERL_COOKIE > /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie
              cp /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/.rabbitmq/
              #change permission so only the user has access to the cookie file
              chmod 600 /opt/bitnami/rabbitmq/.rabbitmq/.erlang.cookie /opt/bitnami/rabbitmq/var/lib/rabbitmq/.erlang.cookie
              #copy the mounted configuration to both places
              cp  /opt/bitnami/rabbitmq/conf/* /opt/bitnami/rabbitmq/etc/rabbitmq
              # Apply resources limits
              ulimit -n "${RABBITMQ_ULIMIT_NOFILES}"
              #replace the default password that is generated
              sed -i "/CHANGEME/cdefault_pass=${RABBITMQ_PASSWORD//\\/\\\\}" /opt/bitnami/rabbitmq/etc/rabbitmq/rabbitmq.conf
              #api check for probes
              cat > /opt/bitnami/rabbitmq/sbin/rabbitmq-api-check <<EOF
              #!/bin/sh
              set -e
              URL=\$1
              EXPECTED=\$2
              ACTUAL=\$(curl --silent --show-error --fail "\${URL}")
              echo "\${ACTUAL}"
              test "\${EXPECTED}" = "\${ACTUAL}"
              EOF
              chmod a+x /opt/bitnami/rabbitmq/sbin/rabbitmq-api-check
              #health check for probes, handle period during rabbtmq sync
              cat > /opt/bitnami/rabbitmq/sbin/rabbitmq-health-check <<EOF
              #!/bin/sh
              START_FLAG=/opt/bitnami/rabbitmq/var/lib/rabbitmq/.start
              if [ -f \${START_FLAG} ]; then
                 rabbitmqctl node_health_check
                 RESULT=\$?
                 if [ \$RESULT -ne 0 ]; then
                    rabbitmqctl status
                    exit $?
                 fi
                 rm -f \${START_FLAG}
                 exit \${RESULT}
              fi
              rabbitmq-api-check \$1 \$2
              EOF
              chmod a+x /opt/bitnami/rabbitmq/sbin/rabbitmq-health-check
              exec rabbitmq-server
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: K8S_SERVICE_NAME
              value: rabbitmq-headless
            - name: K8S_ADDRESS_TYPE
              value: hostname
            - name: RABBITMQ_NODENAME
              value: rabbit@$(POD_NAME).$(K8S_SERVICE_NAME).$(NAMESPACE).svc.cluster.local
            - name: K8S_HOSTNAME_SUFFIX
              value: .$(K8S_SERVICE_NAME).$(NAMESPACE).svc.cluster.local
            - name: RABBITMQ_LOGS
              value: "-"
            - name: RABBITMQ_ULIMIT_NOFILES
              value: "65536"
            - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
              value: +S 2:1
            - name: RABBITMQ_USE_LONGNAME
              value: "true"
            - name: RABBITMQ_ERL_COOKIE
              valueFrom:
                secretKeyRef:
                  key: rabbitmq-erlang-cookie
                  name: rabbitmq
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: rabbitmq-password
                  name: rabbitmq
          image: docker.io/bitnami/rabbitmq
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - rabbitmq-api-check "http://user:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node"
                  '{"status":"ok"}'
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 20
          name: rabbitmq
          ports:
            - containerPort: 4369
              name: epmd
            - containerPort: 5672
              name: amqp
            - containerPort: 25672
              name: dist
            - containerPort: 15672
              name: stats
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - rabbitmq-health-check "http://user:$RABBITMQ_PASSWORD@127.0.0.1:15672/api/healthchecks/node"
                  '{"status":"ok"}'
            initialDelaySeconds: 10
            periodSeconds: 30
            timeoutSeconds: 20
          volumeMounts:
            - mountPath: /opt/bitnami/rabbitmq/conf
              name: config-volume
            - mountPath: /opt/bitnami/rabbitmq/var/lib/rabbitmq
              name: data
      securityContext:
        fsGroup: 1001
        runAsUser: 1001
      serviceAccountName: rabbitmq
      volumes:
        - configMap:
            items:
              - key: rabbitmq.conf
                path: rabbitmq.conf
              - key: enabled_plugins
                path: enabled_plugins
            name: rabbitmq-config
          name: config-volume
  volumeClaimTemplates:
    - metadata:
        labels:
          app: rabbitmq
        name: data
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 8Gi
